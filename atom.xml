<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[心缘冰河]]></title>
  <subtitle><![CDATA[写出我人生,coding]]></subtitle>
  <link href="//atom.xml" rel="self"/>
  <link href="http://donahue-ldz.github.io/"/>
  <updated>2015-03-14T12:24:58.000Z</updated>
  <id>http://donahue-ldz.github.io/</id>
  
  <author>
    <name><![CDATA[donahue]]></name>
    <email><![CDATA[ldz2012yn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[redis持久化]]></title>
    <link href="http://donahue-ldz.github.io/2015/03/14/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://donahue-ldz.github.io/2015/03/14/redis持久化/</id>
    <published>2015-03-14T12:14:23.000Z</published>
    <updated>2015-03-14T12:24:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="redis持久化">redis持久化</h2><p>redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。</p>
<blockquote>
<p>如果你没有数据持久化的需求，也完全可以关闭RDB和AOF方式，这样的话，redis将变成一个纯内存数据库，就像memcache一样。</p>
</blockquote>
<hr>
<h3 id="redis持久化_–_RDB">redis持久化 – RDB</h3><p>RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p>
<p>redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。</p>
<blockquote>
<p>对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能。</p>
</blockquote>
<p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p>
<p>虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。</p>
<hr>
<h3 id="redis持久化_–_AOF">redis持久化 – AOF</h3><p>AOF，英文是Append Only File，即只允许追加不允许改写的文件。</p>
<p>如前面介绍的，AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。</p>
<p>我们通过配置redis.conf中的appendonly yes就可以打开AOF功能。如果有写操作（如SET等），redis就会被追加到AOF文件的末尾。</p>
<blockquote>
<p>默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。</p>
</blockquote>
<p>如果在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了<code>redis-check-aof</code>工具，可以用来进行日志修复。</p>
<p>因为采用了追加方式，如果不做任何处理的话，AOF文件会变得越来越大，为此，redis提供了AOF文件重写（rewrite）机制，即当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。</p>
<p>在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性，这点大家可以放心。</p>
<p>AOF方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。</p>
<p>虽然优点多多，但AOF方式也同样存在缺陷，比如在同样数据规模的情况下，AOF文件要比RDB文件的体积大。而且，AOF方式的恢复速度也要慢于RDB方式。</p>
<p>如果你直接执行BGREWRITEAOF命令，那么redis会生成一个全新的AOF文件，其中便包括了可以恢复现有数据的最少的命令集。</p>
<p>如果运气比较差，AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：</p>
<blockquote>
<p>备份被写坏的AOF文件<br>运行redis-check-aof –fix进行修复<br>用diff -u来看下两个文件的差异，确认问题点<br>重启redis，加载修复后的AOF文件</p>
</blockquote>
<hr>
<h3 id="redis持久化_–_AOF重写">redis持久化 – AOF重写</h3><p>在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p>
<p>与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。</p>
<p>当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。</p>
<p>当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。</p>
<hr>
<h3 id="如何选择RDB和AOF">如何选择RDB和AOF</h3><p>对于我们应该选择RDB还是AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="redis持久化">redis持久化</h2><p>redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。</p>
<blockquote>
<p>如果你没有数据持久化的需求，也完全可以关闭RD]]>
    </summary>
    
      <category term="redis" scheme="http://donahue-ldz.github.io/tags/redis/"/>
    
      <category term="redis" scheme="http://donahue-ldz.github.io/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lucene基础]]></title>
    <link href="http://donahue-ldz.github.io/2015/03/13/lucene%E5%9F%BA%E7%A1%80/"/>
    <id>http://donahue-ldz.github.io/2015/03/13/lucene基础/</id>
    <published>2015-03-13T12:29:02.000Z</published>
    <updated>2015-03-13T12:39:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Lucene 是一个基于 Java 的全文信息检索工具包，它不是一个完整的搜索应用程序，而是为你的应用程序提供索引和搜索功能。Lucene 目前是 Apache Jakarta 家族中的一个开源项目。也是目前最为流行的基于 Java 开源全文检索工具包。</p>
<p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-lucene1/fig001.jpg" alt="lucene结构"></p>
<h2 id="索引和搜索">索引和搜索</h2><p>索引和搜索<br>索引是现代搜索引擎的核心，建立索引的过程就是把源数据处理成非常方便查询的索引文件的过程。为什么索引这么重要呢，试想你现在要在大量的文档中搜索含有某个关键词的文档，那么如果不建立索引的话你就需要把这些文档顺序的读入内存，然后检查这个文章中是不是含有要查找的关键词，这样的话就会耗费非常多的时间，想想搜索引擎可是在毫秒级的时间内查找出要搜索的结果的。这就是由于建立了索引的原因，你可以把索引想象成这样一种数据结构，他能够使你快速的随机访问存储在索引中的关键词，进而找到该关键词所关联的文档。Lucene采用的是一种称为<code>反向索引（inverted index）的机制</code>。反向索引就是说我们维护了一个词 / 短语表，对于这个表中的每个词 / 短语，都有一个链表描述了有哪些文档包含了这个词 / 短语。这样在用户输入查询条件的时候，就能非常快的得到搜索结果<br>对文档建立好索引后，就可以在这些索引上面进行搜索了。搜索引擎首先会对搜索的关键词进行解析，然后再在建立好的索引上面进行查找，最终返回和用户输入的关键词相关联的文档。</p>
<h2 id="建立索引">建立索引</h2><h3 id="Document">Document</h3><p>Document 是用来描述文档的，这里的文档可以指一个 HTML 页面，一封电子邮件，或者是一个文本文件。一个 Document 对象由多个 Field 对象组成的。可以把一个 Document 对象想象成数据库中的一个记录，而每个 Field 对象就是记录的一个字段。</p>
<h3 id="Field">Field</h3><p>Field 对象是用来描述一个文档的某个属性的，比如一封电子邮件的标题和内容可以用两个 Field 对象分别描述。</p>
<h3 id="Analyzer">Analyzer</h3><p>在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由 Analyzer 来做的。Analyzer类是一个抽象类，它有多个实现。针对不同的语言和应用需要选择适合的 Analyzer。Analyzer 把分词后的内容交给 IndexWriter来建立索引。</p>
<h3 id="IndexWriter">IndexWriter</h3><p>IndexWriter 是 Lucene 用来创建索引的一个核心的类，他的作用是把一个个的 Document 对象加到索引中来。<br><code>IndexWriter indexWriter = new IndexWriter(indexDir,luceneAnalyzer,true);</code></p>
<p>true表示新建，false表示原来的索引更新</p>
<h3 id="Directory">Directory</h3><p>这个类代表了 Lucene 的索引的存储的位置，这是一个抽象类，它目前有两个实现，第一个是 FSDirectory，它表示一个存储在文件系统中的索引的位置。第二个是 RAMDirectory，它表示一个存储在内存当中的索引的位置。</p>
<h2 id="搜索">搜索</h2><h3 id="Query">Query</h3><p>这是一个抽象类，他有多个实现，比如 TermQuery, BooleanQuery, PrefixQuery. 这个类的目的是把用户输入的查询字符串封装成 Lucene 能够识别的 Query。</p>
<h3 id="Term">Term</h3><p>Term 是搜索的基本单位，一个 Term 对象有两个 String 类型的域组成。生成一个 Term 对象可以有如下一条语句来完成：</p>
<p><code>Term term = new Term(“fieldName”,”queryWord”);</code></p>
<p>其中第一个参数代表了要在文档的哪一个Field上进行查找，第二个参数代表了要查询的关键词。</p>
<h3 id="TermQuery">TermQuery</h3><p>TermQuery 是抽象类 Query 的一个子类，它同时也是 Lucene 支持的最为基本的一个查询类。生成一个 TermQuery 对象由如下语句完成：</p>
<p><code>TermQuery termQuery = new TermQuery(new Term(“fieldName”,”queryWord”));</code></p>
<p>它的构造函数只接受一个参数，那就是一个 Term 对象。</p>
<h3 id="IndexSearcher">IndexSearcher</h3><p>IndexSearcher 是用来在建立好的索引上进行搜索的。它只能以只读的方式打开一个索引，所以可以有多个 IndexSearcher 的实例在一个索引上进行操作,如。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">FSDirectory</span> directory = FSDirectory.getDirectory(indexDir,<span class="built_in">false</span>); </span><br><span class="line"><span class="title">IndexSearcher</span> searcher = new IndexSearcher(directory);</span><br></pre></td></tr></table></figure></p>
<h3 id="Hits">Hits</h3><p>Hits 是用来保存搜索的结果的。<code>hits.doc()</code>获得文档<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hits hits = searcher.search(luceneQuery); </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; hits.length(); i++)&#123; </span><br><span class="line">    Document <span class="built_in">document</span> = hits.doc(i); </span><br><span class="line">    System.out.println(<span class="built_in">document</span>.<span class="literal">get</span>(<span class="string">""</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>Lucene 是一个基于 Java 的全文信息检索工具包，它不是一个完整的搜索应用程序，而是为你的应用程序提供索引和搜索功能。Lucene 目前是 Apache Jakarta 家族中的一个开源项目。也是目前最为流行的基于 Java 开]]>
    </summary>
    
      <category term="lucene，搜索" scheme="http://donahue-ldz.github.io/tags/lucene%EF%BC%8C%E6%90%9C%E7%B4%A2/"/>
    
      <category term="lucene" scheme="http://donahue-ldz.github.io/categories/lucene/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lucene开篇]]></title>
    <link href="http://donahue-ldz.github.io/2015/03/13/lucene%E5%BC%80%E7%AF%87/"/>
    <id>http://donahue-ldz.github.io/2015/03/13/lucene开篇/</id>
    <published>2015-03-13T12:17:24.000Z</published>
    <updated>2015-03-13T12:20:08.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于项目中有用lucene，由于之前时间一直很忙，所以没有将相关的技术整理出来，今天决定将项目中的lucene整理，对lucene进行整体的学习和研究，会将项目中的部分源码分享目的为了便于分析！<br>渐渐的发现很多技术由于长时间没有再次接触很快就能忘记，汗～<br>反思：再忙也不能忘记更新博客，笨～</p>
<hr>
<p><code>go ~ ~ ~ ~ ~ ~</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近由于项目中有用lucene，由于之前时间一直很忙，所以没有将相关的技术整理出来，今天决定将项目中的lucene整理，对lucene进行整体的学习和研究，会将项目中的部分源码分享目的为了便于分析！<br>渐渐的发现很多技术由于长时间没有再次接触很快就能忘记，汗～<br>反]]>
    </summary>
    
      <category term="lucene" scheme="http://donahue-ldz.github.io/categories/lucene/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MarkDown语法入门]]></title>
    <link href="http://donahue-ldz.github.io/2015/02/15/MarkDown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://donahue-ldz.github.io/2015/02/15/MarkDown语法入门/</id>
    <published>2015-02-15T02:32:21.000Z</published>
    <updated>2015-03-07T05:15:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MarkDown_理念">MarkDown 理念</h2><blockquote>
<p>让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围.</p>
</blockquote>
<hr>
<h2 id="注意">注意</h2><blockquote>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。<br>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;</code>等标签，必须在 <strong>前后</strong> 加上 <strong>空行</strong> 与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
</blockquote>
<hr>
<h1 id="常见的使用">常见的使用</h1><h3 id="标题">标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<blockquote>
<ol>
<li>类 Setext 形式是用底线的形式(在需要成为标题的文字下方加入…)，利用 = （最高阶标题）和 - （第二阶标题)</li>
<li>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶</li>
</ol>
</blockquote>
<p><strong><em>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的若是觉得这样看起来比较舒适，你就可以在行尾加上<br>而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）</em></strong></p>
<hr>
<h3 id="区块引用_Blockquotes">区块引用 Blockquotes</h3><ul>
<li>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。</li>
<li>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; </li>
<li>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; </li>
<li>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</li>
</ul>
<hr>
<h3 id="列表">列表</h3><p>Markdown 支持有序列表和无序列表。</p>
<ul>
<li>无序列表使用星号、加号或是减号作为列表标记 : <code>*+空格</code></li>
<li>有序列表则使用数字接着一个英文句点：<code>数字+句点+空格</code>  <strong>可以完全不在意数字的正确和顺序</strong></li>
<li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符</li>
<li>如果要在列表项目内放进引用，那 &gt; 就需要缩进</li>
<li><code>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符</code></li>
<li>在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠     </li>
</ul>
<hr>
<h3 id="代码区块">代码区块</h3><p>Markdown 会用<code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来.<br>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以(<strong>中间需要一行空行隔开</strong>)，一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。例如，下面的输入：</p>
<p>这是一个普通段落：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[]args)
</code></pre><ul>
<li>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理</li>
<li>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件</li>
</ul>
<hr>
<h3 id="分割线">分割线</h3><p>你可以在一行中用三个以上的<code>星号、减号、底线</code>来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线.</p>
<hr>
<h3 id="链接">链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<ul>
<li>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：<blockquote>
<p><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.</code><br><code>[This link](http://example.net/) has no title attribute.</code></p>
</blockquote>
</li>
</ul>
<p><code>如果你是要链接到同样主机的资源，你可以使用相对路径：See my [About](/about/) page for details.</code></p>
<ul>
<li>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<blockquote>
<p><code>This is [an example] [id] reference-style link</code>.<br>你也可以选择性地在两个方括号中间加上一个空格：<br><code>This is [an example] [id] reference-style link</code>.<br>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
</blockquote>
</li>
</ul>
<p><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code> </p>
<h3 id="强调">强调</h3><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 <code>&lt;strong&gt;</code></p>
<h3 id="代码">代码</h3><ul>
<li>如果要标记一小段行内代码，你可以用反引号把它包起来（`）</li>
<li>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</li>
</ul>
<h3 id="图片">图片</h3><p>markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：</p>
<p><code>![Alt text](/path/to/img.jpg)</code></p>
<p><code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code><br>详细叙述如下：</p>
<p>一个惊叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<br>参考式的图片语法则长得像这样：</p>
<p><code>![Alt text][id]</code><br>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<p><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code><br>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h3 id="自动链接">自动链接</h3><blockquote>
<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><code>&lt;http://example.com/&gt;</code><br>Markdown 会转为：<br><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code><br>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人<br><code>&lt;address@example.com&gt;</code></p>
</blockquote>
<hr>
<h3 id="反斜杠">反斜杠</h3><p><strong>也就是程序员所熟悉的转义符号</strong></p>
<hr>
<p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">参考资料</a><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MarkDown_理念">MarkDown 理念</h2><blockquote>
<p>让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围.</p>
</bl]]>
    </summary>
    
      <category term="MarkDown" scheme="http://donahue-ldz.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[log4j常见配置]]></title>
    <link href="http://donahue-ldz.github.io/2015/01/15/log4j%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://donahue-ldz.github.io/2015/01/15/log4j常见配置/</id>
    <published>2015-01-15T07:27:41.000Z</published>
    <updated>2015-03-07T05:15:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="xml类型的配置">xml类型的配置</h2><p>Log4j配置文件实现了输出到控制台、文件、固定大小文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。 </p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>  
<span class="doctype">&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"&gt;</span>  

<span class="tag">&lt;<span class="title">log4j:configuration</span>&gt;</span>  

 <span class="comment">&lt;!--自定义输出到控制台--&gt;</span>
 <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"CONSOLE"</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.ConsoleAppender"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">layout</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.PatternLayout"</span>&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"ConversionPattern"</span>  
    <span class="attribute">value</span>=<span class="value">"%d - %c -%-4r [%t] %-5p %x - %m%n"</span> /&gt;</span>  
  <span class="tag">&lt;/<span class="title">layout</span>&gt;</span>  

  <span class="comment">&lt;!--限制输出级别--&gt;</span>  
  <span class="tag">&lt;<span class="title">filter</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.varia.LevelRangeFilter"</span>&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"LevelMax"</span> <span class="attribute">value</span>=<span class="value">"ERROR"</span>/&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"LevelMin"</span> <span class="attribute">value</span>=<span class="value">"TRACE"</span>/&gt;</span>  
  <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>  
 <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>  

 <span class="comment">&lt;!--输出到文件--&gt;</span>
 <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"FILE"</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.FileAppender"</span>&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"File"</span> <span class="attribute">value</span>=<span class="value">"log4j.log"</span>/&gt;</span>  
  <span class="tag">&lt;<span class="title">layout</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.PatternLayout"</span>&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"ConversionPattern"</span>  
    <span class="attribute">value</span>=<span class="value">"%d - %c -%-4r [%t] %-5p %x - %m%n"</span> /&gt;</span>  
  <span class="tag">&lt;/<span class="title">layout</span>&gt;</span>  
 <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>    

 <span class="comment">&lt;!--输出到数据库--&gt;</span>
 <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"DATABASE"</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.jdbc.JDBCAppender"</span>&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"URL"</span> <span class="attribute">value</span>=<span class="value">"jdbc:oracle:thin:@192.168.0.59:1521:oanet"</span>/&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"oracle.jdbc.driver.OracleDriver"</span>/&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"user"</span>/&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"password"</span>/&gt;</span>      
  <span class="tag">&lt;<span class="title">layout</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.PatternLayout"</span>&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"ConversionPattern"</span> 
   <span class="attribute">value</span>=<span class="value">"INSERT INTO hdczoa.LOG4J(stamp,thread,info_level,class,message) VALUES ('%d', '%t', '%p', '%c', %m)"</span> /&gt;</span>  
  <span class="tag">&lt;/<span class="title">layout</span>&gt;</span>  
 <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>  

 <span class="comment">&lt;!-- 发邮件（只有ERROR时才会发送！） --&gt;</span>  
 <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"MAIL"</span>  <span class="attribute">class</span>=<span class="value">"org.apache.log4j.net.SMTPAppender"</span>&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"threshold"</span> <span class="attribute">value</span>=<span class="value">"debug"</span> /&gt;</span>  
  <span class="comment">&lt;!-- 日志的错误级别  
   &lt;param name="threshold" value="fatal"/&gt;  
  --&gt;</span>  
  <span class="comment">&lt;!-- 缓存文件大小，日志达到512K时发送Email --&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"BufferSize"</span> <span class="attribute">value</span>=<span class="value">"512"</span> /&gt;</span><span class="comment">&lt;!-- 单位K --&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"From"</span> <span class="attribute">value</span>=<span class="value">"test@163.com"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"SMTPHost"</span> <span class="attribute">value</span>=<span class="value">"smtp.163.com"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"Subject"</span> <span class="attribute">value</span>=<span class="value">"juyee-log4jMessage"</span> /&gt;</span>  
  <span class="comment">&lt;!--收件人--&gt;</span>
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"To"</span> <span class="attribute">value</span>=<span class="value">"reciever@163.com"</span> /&gt;</span>
  <span class="comment">&lt;!--发件人登陆邮箱服务器--&gt;</span>
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"SMTPUsername"</span> <span class="attribute">value</span>=<span class="value">"user"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"SMTPPassword"</span> <span class="attribute">value</span>=<span class="value">"password"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">layout</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.PatternLayout"</span>&gt;</span>  
   <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"ConversionPattern"</span>  
    <span class="attribute">value</span>=<span class="value">"%-d{yyyy-MM-dd HH:mm:ss.SSS} [%p]-[%c] %m%n"</span> /&gt;</span>  
  <span class="tag">&lt;/<span class="title">layout</span>&gt;</span>  
 <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>  

 <span class="tag">&lt;<span class="title">appender</span> <span class="attribute">name</span>=<span class="value">"ASYNC"</span> <span class="attribute">class</span>=<span class="value">"org.apache.log4j.AsyncAppender"</span>&gt;</span>  
  <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"BufferSize"</span> <span class="attribute">value</span>=<span class="value">"256"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"DATABASE"</span> /&gt;</span>  
 <span class="tag">&lt;/<span class="title">appender</span>&gt;</span>  

 <span class="comment">&lt;!--通过&lt;logger&gt;&lt;/logger&gt;的定义可以将各个包中的类日志输出到不同的日志文件中--&gt;</span>  
 <span class="tag">&lt;<span class="title">logger</span> <span class="attribute">name</span>=<span class="value">"packageName"</span> <span class="attribute">additivity</span>=<span class="value">"false"</span>&gt;</span>     
        <span class="tag">&lt;<span class="title">level</span> <span class="attribute">value</span>=<span class="value">"WARN"</span> /&gt;</span>     
        <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"CONSOLE"</span> /&gt;</span>     
    <span class="tag">&lt;/<span class="title">logger</span>&gt;</span>  

 <span class="comment">&lt;!--通过&lt;category&gt;&lt;/category&gt;的定义可以将各个包中的类日志输出到不同的日志文件中--&gt;</span>  
 <span class="tag">&lt;<span class="title">category</span> <span class="attribute">name</span>=<span class="value">"com.litt3"</span>&gt;</span>     
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">value</span>=<span class="value">"DEBUG"</span> /&gt;</span>   
       <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"CONSOLE"</span> /&gt;</span>  
       <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"MAIL"</span> /&gt;</span>  
  <span class="tag">&lt;/<span class="title">category</span>&gt;</span>  

 <span class="tag">&lt;<span class="title">root</span>&gt;</span>  
  <span class="tag">&lt;<span class="title">priority</span> <span class="attribute">value</span>=<span class="value">"debug"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"CONSOLE"</span> /&gt;</span>  
  <span class="tag">&lt;<span class="title">appender-ref</span> <span class="attribute">ref</span>=<span class="value">"FILE"</span> /&gt;</span>  
 <span class="tag">&lt;/<span class="title">root</span>&gt;</span>  


<span class="tag">&lt;/<span class="title">log4j:configuration</span>&gt;</span>  
</code></pre><hr>
<h2 id="属性文件配置">属性文件配置</h2><p>Log4j配置文件实现了输出到控制台、文件、固定大小文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。 </p>
<pre><code>log4j.rootLogger=DEBUG,console,dailyFile,im 
log4j<span class="class">.additivity</span><span class="class">.org</span><span class="class">.apache</span>=true 
</code></pre><h3 id="控制台(console)">控制台(console)</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.console</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.ConsoleAppender</span> 
log4j<span class="class">.appender</span><span class="class">.console</span><span class="class">.Threshold</span>=DEBUG 
log4j<span class="class">.appender</span><span class="class">.console</span><span class="class">.ImmediateFlush</span>=true 
log4j<span class="class">.appender</span><span class="class">.console</span><span class="class">.Target</span>=System<span class="class">.err</span> 
log4j<span class="class">.appender</span><span class="class">.console</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.console</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="日志文件(logFile)">日志文件(logFile)</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.logFile</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.FileAppender</span> 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.Threshold</span>=DEBUG 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.ImmediateFlush</span>=true 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.Append</span>=true 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.File</span>=log<span class="class">.log4j</span> 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.logFile</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="指定大小文件(rollingFile)">指定大小文件(rollingFile)</h3><p><code>文件大小到达指定尺寸的时候产生一个新的文件</code></p>
<pre><code>log4j<span class="class">.appender</span><span class="class">.rollingFile</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.RollingFileAppender</span> 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.Threshold</span>=DEBUG 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.ImmediateFlush</span>=true 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.Append</span>=true 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.File</span>=log<span class="class">.log4j</span> 
#文件达到多大开始重新开始记录新文件
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.MaxFileSize</span>=<span class="number">200</span>KB 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.MaxBackupIndex</span>=<span class="number">50</span> 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.rollingFile</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="每天产生一个文件(dailyFile)">每天产生一个文件(dailyFile)</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.dailyFile</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.DailyRollingFileAppender</span> 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.Threshold</span>=DEBUG 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.ImmediateFlush</span>=true 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.Append</span>=true 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.File</span>=log<span class="class">.log4j</span> 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.DatePattern</span>=<span class="string">'.'</span>yyyy-MM-<span class="tag">dd</span> 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.dailyFile</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="发送日志到指定邮件">发送日志到指定邮件</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.mail</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.net</span><span class="class">.SMTPAppender</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.Threshold</span>=FATAL 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.BufferSize</span>=<span class="number">10</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.From</span> = xxx@mail<span class="class">.com</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.SMTPHost</span>=mail<span class="class">.com</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.Subject</span>=Log4J Message 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.To</span>= xxx@mail<span class="class">.com</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.mail</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="应用于数据库">应用于数据库</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.database</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.jdbc</span><span class="class">.JDBCAppender</span> 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.URL</span>=jdbc:mysql:<span class="comment">//localhost:3306/test </span>
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.driver</span>=com<span class="class">.mysql</span><span class="class">.jdbc</span><span class="class">.Driver</span> 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.user</span>=root 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.password</span>= 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.sql</span>=INSERT INTO LOG4J (Message) <span class="function"><span class="title">VALUES</span><span class="params">(<span class="string">'=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n'</span>)</span></span> 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.database</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre><h3 id="自定义Appender">自定义Appender</h3><pre><code>log4j<span class="class">.appender</span><span class="class">.im</span> = net<span class="class">.cybercorlin</span><span class="class">.util</span><span class="class">.logger</span><span class="class">.appender</span><span class="class">.IMAppender</span> 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.host</span> = mail<span class="class">.cybercorlin</span><span class="class">.net</span> 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.username</span> = username 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.password</span> = password 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.recipient</span> = 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.layout</span>=org<span class="class">.apache</span><span class="class">.log4j</span><span class="class">.PatternLayout</span> 
log4j<span class="class">.appender</span><span class="class">.im</span><span class="class">.layout</span><span class="class">.ConversionPattern</span>=[%-<span class="number">5</span>p] %<span class="function"><span class="title">d</span><span class="params">(%r)</span></span> --&gt; [%t] %l: %m %x %n 
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="xml类型的配置">xml类型的配置</h2><p>Log4j配置文件实现了输出到控制台、文件、固定大小文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。 </p>
<pre><code><span class="pi">&lt;?xml versio]]>
    </summary>
    
      <category term="log4j配置" scheme="http://donahue-ldz.github.io/tags/log4j%E9%85%8D%E7%BD%AE/"/>
    
      <category term="java" scheme="http://donahue-ldz.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[日志记录]]></title>
    <link href="http://donahue-ldz.github.io/2015/01/05/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
    <id>http://donahue-ldz.github.io/2015/01/05/日志记录/</id>
    <published>2015-01-05T06:42:11.000Z</published>
    <updated>2015-03-07T05:15:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="日志服务">日志服务</h2><p>三个目的 ：</p>
<ul>
<li>监视代码中变量的变化情况，周期性的记录到文件中供其他应用进行统计分析工作</li>
<li>跟踪代码运行时轨迹，作为日后审计的依据</li>
<li><p>担当集成开发环境中的调试器的作用，向文件或控制台打印代码的调试信息</p>
<hr>
</li>
</ul>
<h2 id="log4j简介">log4j简介</h2><blockquote>
<p>Log4j是Apache的一个开放源代码项目，通过使用Log4j，我们可以控制日志信息输送的目的地为控制台、文件、GUI组件、甚至可以为套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
<p>此外，通过 Log4j 其他语言接口，您可以在 C 、 C+ + 、 .Net 、 PL/SQL 程序中使用 Log4j ，其语法和用法与在 Java 程序中一样，使得多语言分布式系统得到一个统一一致的日志组件模块。而且，通 过使用各种第三方扩展，您可以很方便地将 Log4j 集成到 J2EE 、 JINI 甚至是 SNMP 应用中。</p>
</blockquote>
<hr>
<h2 id="Log4j三大类构成">Log4j三大类构成</h2><h3 id="Logger">Logger</h3><p>负责输出日志信息，并能够对日志信息进行分类筛选，即决定哪些日志信息应该被输出，哪些该被忽略。Loggers组件输出日志信息时分为5个级别：DEBUG、INFO、WARN、ERROR、FATAL。这五个级别的顺序是：DEBUG&lt;INFO&lt;WARN&lt;ERROR&lt;FATAL。如果设置某个Logger组件的级别是P，则只有级别比P高的日志信息才能输出。Logger是有继承关系的，最上层是rootLogger，定义的其他Logger都会继承rootLogger。</p>
<h3 id="Appender">Appender</h3><p>定义了日志输出目的地，指定日志信息应该被输出到什么地方。输出的目的地可以是控制台、文件或网络设备。<br>格式为：log4j.appender.appenderName =  其中， Log4j提供的appender有以下几种:</p>
<blockquote>
<ol>
<li>org.apache.log4j.ConsoleAppender （控制台）</li>
<li>org.apache.log4j.FileAppender （文件）</li>
<li>org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）， </li>
<li>org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件） </li>
<li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li>
<li>org.apache.log4j.JdbcAppender(将日志讯息保存到数据库中) </li>
</ol>
</blockquote>
<p>此外还可以自己定义</p>
<h3 id="Layout">Layout</h3><p>通过在Appender的后面附加Layout来实现格式化输出。</p>
<p>一个Logger可以有多个Appender，每个Appender对应一个Layout。<br>配置日志信息的格式（布局），其语法为：<br>log4j.appender.appenderName.layout = 其中， Log4j 提供的 layout 有以几种：</p>
<blockquote>
<ol>
<li>org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）</li>
<li>org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）</li>
<li>org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息） </li>
<li>org.apache.log4j.PatternLayout （可以灵活地指定布局模式）</li>
</ol>
</blockquote>
<p><code>org.apache.log4j.PatternLayout （可以灵活地指定布局模式）</code></p>
<blockquote>
<p>Log4J 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息，打印参数如下：<br>%m 输出代码中指定的消息<br>%p 输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL<br>%r 输出自应用启动到输出该 log 信息耗费的毫秒数<br>%c 输出所属的类目，通常就是所在类的全名<br>%t 输出产生该日志事件的线程名<br>%n 输出一个回车换行符， Windows 平台为 “rn” ， Unix 平台为 “n”<br>%d 输出日志时间点的日期或时间，默认格式为 ISO8601，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS} </p>
</blockquote>
<hr>
<h2 id="常见优秀配置配置">常见优秀配置配置</h2><p>详见博文，<a href="http://donahue-ldz.github.io/2015/01/15/log4j%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">log4j常见配置</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="日志服务">日志服务</h2><p>三个目的 ：</p>
<ul>
<li>监视代码中变量的变化情况，周期性的记录到文件中供其他应用进行统计分析工作</li>
<li>跟踪代码运行时轨迹，作为日后审计的依据</li>
<li><p>担当集成开发环境中的调试器的作用]]>
    </summary>
    
      <category term="log4j" scheme="http://donahue-ldz.github.io/tags/log4j/"/>
    
      <category term="日志记录" scheme="http://donahue-ldz.github.io/tags/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
    
      <category term="java" scheme="http://donahue-ldz.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[finalize理解]]></title>
    <link href="http://donahue-ldz.github.io/2014/09/28/finalize%E7%90%86%E8%A7%A3/"/>
    <id>http://donahue-ldz.github.io/2014/09/28/finalize理解/</id>
    <published>2014-09-28T09:30:28.000Z</published>
    <updated>2015-03-07T05:15:56.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Object类声明了protect finalize方法</strong></p>
<blockquote>
<p>我们都知道程序初始化的重要性，但是通常会忘记清除工作的重要性，我们知道在c++中有构造函数初始化，有相应的析构函数完成收尾清楚工作</p>
</blockquote>
<p>在java中，有c++样构造函数却没有其相应的析构函数，但是却有一个和析构函数相似的一个finalize方法，很多人容易混淆他们两个，下面是区别：</p>
<ol>
<li><p>c++中析构函数在对象声明周期结束时会被调用，数组等new出来时候，delete等函数时候析构会被调用，如果忘记调用这些函数的时候就会造成内存泄露</p>
</li>
<li><p>java中的finalize方法在GC进行回收之前在做<code>第二次标记</code>的时候会被调用。<br>如果对象没有覆盖finalize()或者已经被调用了一次之后，将不再调用了，如果需要调用的话会被加入一个称为F-queue队列中，然后由虚拟机去自动开一条低优先权的线程去执行，<strong>但是不一定会等待其去执行完</strong>。<br>我们知道对于GC什么时候调用，以及什么时候调用对象的finalize方法这些都是不确定的，一般情况下当内存比较充足时候GC不会去时刻调用的<br>因Gc调用也要消耗资源嘛，对于有些程序而言，有可能某些对象的没有调用GC时候程序已经结束，此时交给<strong>操作系统去回收内存</strong>。</p>
</li>
</ol>
<hr>
<p>所以finalize方法并不总是调用。但是这个方法还是比较有用的，我们知道：<br><code>java的GC之后回收new 出来的对象内存</code><br><code>对于有些时候我们使用native方法，如才c/c++时候采取malloc分配的内存此时GC就不能回收了</code><br>我们也不希望这些内存一直存在，我们可以在finalize方法中去调用native方法的free等函数去试着回收，当finalize方法被调用时候，就象的finalize方法被调用时候，我们可以在里面实现和析构函数相同的功能<br>但是如果没能呗回收了，最起码被回收的机会由原来的0变成大于0了</p>
<p>就是当对有被调用的时候，就不能同等去看待了<br>在现实的使用中我们完全可以忘掉这个方法，她所做的事情完全可以有finally模块去完成，不要使用他吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Object类声明了protect finalize方法</strong></p>
<blockquote>
<p>我们都知道程序初始化的重要性，但是通常会忘记清除工作的重要性，我们知道在c++中有构造函数初始化，有相应的析构函数完成收尾清楚工作</p>
<]]>
    </summary>
    
      <category term="finalize" scheme="http://donahue-ldz.github.io/tags/finalize/"/>
    
      <category term="内存回收" scheme="http://donahue-ldz.github.io/tags/%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/"/>
    
      <category term="java" scheme="http://donahue-ldz.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[线程等待]]></title>
    <link href="http://donahue-ldz.github.io/2014/09/15/%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85/"/>
    <id>http://donahue-ldz.github.io/2014/09/15/线程等待/</id>
    <published>2014-09-15T02:32:21.000Z</published>
    <updated>2015-03-07T05:15:56.000Z</updated>
    <content type="html"><![CDATA[<p><strong>在多线程程序设计中，经常会遇到一个线程等待一个或多个线程的场景<br>遇到这样的场景应该如何解决？</strong></p>
<blockquote>
<ul>
<li>如果是一个线程等待一个线程，则可以通过await()和notify()来实现；</li>
<li>如果是一个线程等待多个线程，则就可以使用CountDownLatch和CyclicBarrier来实现比较好的控制。</li>
</ul>
</blockquote>
<hr>
<h2 id="CountDownLatch应用">CountDownLatch应用</h2><p><code>场景：主要是:一个线程等待多个其他线程</code></p>
<p>例如：百米赛跑：8名运动员同时起跑，由于速度的快慢，肯定有会出现先到终点和晚到终点的情况，而终点有个统计成绩的仪器，当所有选手到达终点时，它会统计所有人的成绩并进行排序，然后把结果发送到汇报成绩的系统。</p>
<p>其实这就是一个CountDownLatch的应用场景：一个线程或多个线程等待其他线程运行达到某一目标后进行自己的下一步工作，而被等待的“其他线程”达到这个目标后继续自己下面的任务。</p>
<p>这个场景中：</p>
<p>被等待的“其他线程”——&gt;8名运动员<br>等待“其他线程”的这个线程——&gt;终点统计成绩的仪器<br>那么，如何来通过CountDownLatch来实现上述场景的线程控制和调度呢？</p>
<blockquote>
<p>jdk中CountDownLatch类有一个常用的构造方法：CountDownLatch(int count)<br>两个常用的方法：await()和countdown()</p>
</blockquote>
<p>其中count是一个计数器中的初始化数字，比如初始化的数字是2，当一个线程里调用了countdown()，则这个计数器就减一，当线程调用了await()，则这个线程就等待这个计数器变为0，当这个计数器变为0时，这个线程继续自己下面的工作。下面是上述CountDownLatch场景的实现：</p>
<p>Work类（运动员）：</p>
<pre><code><span class="keyword">import</span> java.util.concurrent.CountDownLatch;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> CountDownLatch beginSignal;
    <span class="keyword">private</span> CountDownLatch endSignal;

    <span class="function"><span class="keyword">public</span> <span class="title">Work</span><span class="params">(<span class="keyword">int</span> id, CountDownLatch begin, CountDownLatch end)</span> </span>{
        <span class="keyword">this</span>.id = id;
        <span class="keyword">this</span>.beginSignal = begin;
        <span class="keyword">this</span>.endSignal = end;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
        <span class="keyword">try</span> {
              beginSignal.await();
              System.out.println(<span class="string">"起跑..."</span>);
              System.out.println(<span class="string">"work"</span> + id + <span class="string">"到达终点"</span>);
              endSignal.countDown();
              System.out.println(<span class="string">"work"</span> + id + <span class="string">"继续干其他事情"</span>);
            } <span class="keyword">catch</span> (InterruptedException e) {
                <span class="comment">// TODO Auto-generated catch block</span>
                e.printStackTrace();
            }
    }
</code></pre><p>}<br>Main类（终点统计仪器）：</p>
<pre><code>import java.util.concurrent.CountDownLatch;
<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> {

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        CountDownLatch begSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);
        CountDownLatch endSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">8</span>);
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) {
            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Work(i, begSignal, endSignal)).start();
        }

    <span class="keyword">try</span> {
        begSignal.countDown();  <span class="comment">//统一起跑</span>
        endSignal.await();      <span class="comment">//等待运动员到达终点</span>
        System.<span class="keyword">out</span>.println(<span class="string">"结果发送到汇报成绩的系统"</span>);
        } <span class="keyword">catch</span> (InterruptedException e) {
            e.printStackTrace();
        }
     }
</code></pre><p>}</p>
<hr>
<h2 id="CyclicBarrier的应用">CyclicBarrier的应用</h2><p><code>场景：主要是多个线程之间相互等待，循环等待</code></p>
<p> 例如：有四个游戏玩家玩游戏，游戏有三个关卡，每个关卡必须要所有玩家都到达后才能允许通关。</p>
<p>其实这个场景里的玩家中如果有玩家A先到了关卡1，他必须等待其他所有玩家都到达关卡1时才能通过，也就是说：<br><code>线程之间需要互相等待，这和CountDownLatch的应用场景有区别。</code><br><code>CountDownLatch里的线程是到了运行的目标后继续干自己的其他事情</code><br><code>而这里的线程需要等待其他线程后才能继续完成下面的工作</code>。   </p>
<blockquote>
<p>jdk中CyclicBarrier类有两个常用的构造方法：</p>
<ol>
<li>CyclicBarrier(int parties)<br>这里的parties也是一个计数器，例如，初始化时parties里的计数是3，于是拥有该CyclicBarrier对象的线程当parties的计数为3时就唤醒，注：这里parties里的计数在运行时当调用CyclicBarrier:await()时,计数就加1，一直加到初始的值。</li>
<li>CyclicBarrier(int parties, Runnable barrierAction)<br>这里的parties与上一个构造方法的解释是一样的，这里需要解释的是第二个入参（Runnable barrierAction）,这个参数是一个实现Runnable接口的类的对象，也就是说当parties加到初始值时就出发barrierAction的内容。</li>
</ol>
</blockquote>
<p>下面来实现上述的应用场景：</p>
<p>Player类（玩家类）</p>
<pre><code><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;
<span class="keyword">import</span> java.util.concurrent.CyclicBarrier;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{

    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;
    <span class="keyword">private</span> <span class="keyword">int</span> id;

    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(<span class="keyword">int</span> id, CyclicBarrier cyclicBarrier)</span> </span>{
        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;
        <span class="keyword">this</span>.id = id;
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
        <span class="keyword">try</span> {
            System.out.println(<span class="string">"玩家"</span> + id + <span class="string">"正在玩第一关..."</span>);
            cyclicBarrier.await();
            System.out.println(<span class="string">"玩家"</span> + id + <span class="string">"进入第二关..."</span>);
            } <span class="keyword">catch</span> (InterruptedException e) {
              e.printStackTrace();
        } <span class="keyword">catch</span> (BrokenBarrierException e) {
             e.printStackTrace();
    }
  }
}
</code></pre><p>GameBarrier类（关卡类，这里控制玩家必须全部到达第一关结束的关口才能进入第二关）</p>
<pre><code><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBarrier</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">4</span>, <span class="keyword">new</span> Runnable() {

        <span class="annotation">@Override</span>
        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
             System.out.println(<span class="string">"所有玩家进入第二关！"</span>);
        }
     });

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {
        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Player(i, cyclicBarrier)).start();
     }
  }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>在多线程程序设计中，经常会遇到一个线程等待一个或多个线程的场景<br>遇到这样的场景应该如何解决？</strong></p>
<blockquote>
<ul>
<li>如果是一个线程等待一个线程，则可以通过await()和notify()来实现；</li>]]>
    </summary>
    
      <category term="CyclicBarrier" scheme="http://donahue-ldz.github.io/tags/CyclicBarrier/"/>
    
      <category term="线程" scheme="http://donahue-ldz.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程等待，CountDownLatch" scheme="http://donahue-ldz.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%EF%BC%8CCountDownLatch/"/>
    
      <category term="java" scheme="http://donahue-ldz.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim 配色知识]]></title>
    <link href="http://donahue-ldz.github.io/2014/03/23/vim-%E9%85%8D%E8%89%B2/"/>
    <id>http://donahue-ldz.github.io/2014/03/23/vim-配色/</id>
    <published>2014-03-23T08:31:51.000Z</published>
    <updated>2015-03-07T05:17:49.000Z</updated>
    <content type="html"><![CDATA[<p>在vimcolorschemetest站点上，有数以千计的vim主题插件，然而每款主题或多或少都有我们不满意的地方，这就需要我们自己动手来进行扩展。</p>
<hr>
<h2 id="基础知识">基础知识</h2><p>在vim中，主题也是以插件形式存在的。其中系统自带的主题，存放在$VIMRUNTIME/colors文件夹下，以*.vim命名。（注：查看$VIMRUNTIME请在vim中执行 :echo $VIMRUNTIME）<br>用户自定义的主题一般不放在系统目录下，而是放在<code>~/.vim/colors</code>目录下，这样不会干扰到其他用户，同时也方便备份自己的vim配置。<br>更换vim主题的命令为：<br><code>:colorscheme 主题插件名称</code><br>但是这样只能临时改变vim主题，退出后又会恢复原样，如果想永久改变，请在~/.vimrc中添加：<br><code>colorscheme 主题插件名称</code></p>
<p>由于我不使用Windows下的gvim，而是在linux下或远程ssh使用终端下的vim，因此首先需要在~/.vimrc中添加开启256颜色支持：<br><code>set t_Co=256</code><br>为了能在编辑程序时高亮显示关键字，还需要在~/.vimrc中开启语法高亮显示：<br><code>syntax enable</code><br><code>syntax on</code><br>做完上述的准备工作后，让我们正式开始定制主题之旅吧！</p>
<h3 id="主题色调">主题色调</h3><p>在配置其他属性前，首先要配置主题整体的色调，只有两个选择：dark和light（暗色调和亮色调）。对于经常阅读和编写代码的程序员来说，暗色调是更好的选择：</p>
<p><code>set background=dark</code><br><strong><span style="color: #ff00ff;">接下来，需要重新设置一下语法高亮，否则设置不会生效：</span></strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">version</span> &gt; <span class="number">580</span></span><br><span class="line"><span class="keyword">hi</span> clear</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">"syntax_on"</span>)</span><br><span class="line"><span class="keyword">syntax</span> reset</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></p>
<h3 id="主题名称">主题名称</h3><p>主题名称是无参数调用 :colorscheme 时返回的信息，用于分辨不同主题，其设置如下：</p>
<p><code>let g:colors_name=&quot;nslib_color256&quot;</code></p>
<h4 id="基础属性">基础属性</h4><p>由于vim可以在黑白终端、彩色终端、GUI界面下运行，所以需要对其分贝进行配置，下面给出一个简要的文档说明：</p>
<blockquote>
<p>term 黑白终端的属性<br>cterm  彩色终端的属性<br>ctermfg 彩色终端前景色<br>ctermbg 彩色终端背景色<br>gui GUI属性<br>guifg GUI前景色<br>guibg GUI背景色</p>
</blockquote>
<p>对于黑白终端，我们没有配置的必要，因此主要的配置工作集中在彩色终端与GUI界面上，又由于彩色终端与GUI界面的配置只是关键字不同，因此这里只选取彩色终端进行说明。</p>
<a id="more"></a>
<p>由于不是所有终端都支持256色，因此使用一些安全色会使我们的主题更有移植性，而GUI可以支持所有颜色，不在考虑范围之内，vim文档给出的安全色如下：</p>
<blockquote>
<p>“0 Black<br>“1 DarkBlue<br>“2 DarkGreen<br>“3 DarkCyan<br>“4 DarkRed<br>“5 DarkMagenta<br>“6 Brown, DarkYellow<br>“7 LightGray, LightGrey, Gray, Grey<br>“8 DarkGray, DarkGrey<br>“9 Blue, LightBlue<br>“10 Green, LightGreen<br>“11 Cyan, LightCyan<br>“12 Red, LightRed<br>“13 Magenta, LightMagenta<br>“14 Yellow, LightYellow<br>“15 White</p>
</blockquote>
<!--more-->
<h3 id="配色语法">配色语法</h3><p>下面举例说明配色语法：<br><code>hi Type ctermfg=LightYellow ctermbg=Black cterm=bold</code><br>其中，hi是highlight命令的缩写，用于高亮配置；Type是要配色的元素名称；参数采用的是Key=Value的形式。</p>
<p>元素列表<br>配置颜色的语法非常简单，无需累赘，下面将分类介绍常用的元素标签：</p>
<h4 id="状态栏提示信息">状态栏提示信息</h4><blockquote>
<p>hi StatusLine 状态栏<br>hi StatusLineNC 非当前窗口的状态栏<br>ErrorMsg 错误信息<br>WarningMsg 警告信息<br>ModeMsg 当前模式<br>MoreMsg 其他文本<br>Question 询问用户<br>Error 错误</p>
</blockquote>
<h4 id="文本搜索">文本搜索</h4><blockquote>
<p>hi IncSearch 增量搜索时匹配的文本符串<br>hi Search 匹配的文本串</p>
</blockquote>
<h4 id="弹出菜单">弹出菜单</h4><blockquote>
<p>Pmenu 弹出菜单<br>PmenuSel 菜单当前选择项</p>
</blockquote>
<h4 id="窗体边框相关">窗体边框相关</h4><blockquote>
<p>VertSplit 垂直分割窗口的边框<br>LineNr 行号<br>Cursor 光标所在字符<br>CursorLine 光标所在行<br>ColorColumn 光标所在列<br>ColorColumn 标尺<br>NonText 窗口尾部的~和@，以及文本里实际不显示的字符</p>
</blockquote>
<h4 id="diff模式">diff模式</h4><blockquote>
<p>DiffAdd diff模式增加的行<br>DiffChange diff模式改变的行<br>DiffDelete diff模式删除的行<br>DiffText diff模式插入文本</p>
</blockquote>
<h4 id="C/C++语法">C/C++语法</h4><blockquote>
<p>Comment 注释<br>PreProc 预处理<br>Type 数据类型<br>Constant 常量<br>Statement 控制语句<br>Special 字符串中的中的特殊字符<br>String 字符串<br>cCppString Cpp字符串<br>Number 数字<br>Todo TODO、HACK、FIXME等标签</p>
</blockquote>
<h3 id="我的主题">我的主题</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">set <span class="variable">background=</span>dark</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> version &amp;gt; <span class="number">580</span></span><br><span class="line">hi clear</span><br><span class="line"><span class="keyword">if</span> exists(<span class="string">"syntax_on"</span>)</span><br><span class="line">syntax reset</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g:<span class="variable">colors_name=</span><span class="string">"nslib_color256"</span></span><br><span class="line"></span><br><span class="line">hi Normal <span class="variable">ctermfg=</span>Grey <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi ColorColumn <span class="variable">ctermfg=</span>White <span class="variable">ctermbg=</span>Grey</span><br><span class="line">·</span><br><span class="line">hi ErrorMsg <span class="variable">term=</span>standout</span><br><span class="line">hi ErrorMsg <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>DarkBlue</span><br><span class="line">hi WarningMsg <span class="variable">term=</span>standout</span><br><span class="line">hi WarningMsg <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>DarkBlue</span><br><span class="line">hi ModeMsg <span class="variable">term=</span>bold <span class="variable">cterm=</span>bold</span><br><span class="line">hi ModeMsg <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi MoreMsg <span class="variable">term=</span>bold <span class="variable">ctermfg=</span>LightGreen</span><br><span class="line">hi MoreMsg <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Question <span class="variable">term=</span>standout <span class="variable">gui=</span>bold</span><br><span class="line">hi Question <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Error <span class="variable">term=</span>bold <span class="variable">cterm=</span>bold</span><br><span class="line">hi Error <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">·</span><br><span class="line">hi LineNr <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi CursorColumn <span class="variable">ctermfg=</span>White <span class="variable">ctermbg=</span>Grey</span><br><span class="line">hi CursorLine <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi ColorColumn <span class="variable">ctermfg=</span>White <span class="variable">ctermbg=</span>Grey</span><br><span class="line">·</span><br><span class="line">hi IncSearch <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>DarkGrey</span><br><span class="line">hi Search <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>DarkGrey</span><br><span class="line">hi StatusLine <span class="variable">term=</span>bold <span class="variable">cterm=</span>bold</span><br><span class="line">hi StatusLine <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>Grey</span><br><span class="line">hi StatusLineNC <span class="variable">term=</span>bold <span class="variable">cterm=</span>bold</span><br><span class="line">hi StatusLineNC <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>Grey</span><br><span class="line">·</span><br><span class="line">hi VertSplit <span class="variable">ctermfg=</span>Grey <span class="variable">ctermbg=</span>Grey</span><br><span class="line">hi Visual <span class="variable">term=</span>bold <span class="variable">cterm=</span>bold</span><br><span class="line">hi Visual <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>Grey</span><br><span class="line">·</span><br><span class="line">highlight Pmenu <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>Grey</span><br><span class="line">highlight PmenuSel <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>DarkBlue</span><br><span class="line">·</span><br><span class="line">hi Comment <span class="variable">ctermfg=</span>DarkCyan <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi PreProc <span class="variable">ctermfg=</span>Blue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Type <span class="variable">ctermfg=</span>LightYellow <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi Constant <span class="variable">ctermfg=</span>Blue <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi Statement <span class="variable">ctermfg=</span>LightYellow <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi Special <span class="variable">ctermfg=</span>Red <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi SpecialKey <span class="variable">ctermfg=</span>Red <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi Number <span class="variable">ctermfg=</span>Blue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi cCppString <span class="variable">ctermfg=</span>Red <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi String <span class="variable">ctermfg=</span>Red <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Identifier <span class="variable">ctermfg=</span>Red <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi Todo <span class="variable">ctermfg=</span>Black <span class="variable">ctermbg=</span>Gray <span class="variable">cterm=</span>bold</span><br><span class="line">hi NonText <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Directory <span class="variable">ctermfg=</span>Blue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Folded <span class="variable">ctermfg=</span>DarkBlue <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>bold</span><br><span class="line">hi FoldColumn <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Underlined <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black <span class="variable">cterm=</span>underline</span><br><span class="line">hi Title <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Ignore <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line"></span><br><span class="line">hi Directory <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseSynopsis <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseCurDir <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi favoriteDirectory <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseDirectory <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseSuffixInfo <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseSortBy <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseFilter <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseFiletime <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi browseSuffixes <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line"></span><br><span class="line">hi TagListComment <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi TagListFileName <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi TagListTitle <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi TagListTagScope <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi TagListTagName <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br><span class="line">hi Tag <span class="variable">ctermfg=</span>LightBlue <span class="variable">ctermbg=</span>Black</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在vimcolorschemetest站点上，有数以千计的vim主题插件，然而每款主题或多或少都有我们不满意的地方，这就需要我们自己动手来进行扩展。</p>
<hr>
<h2 id="基础知识">基础知识</h2><p>在vim中，主题也是以插件形式存在的。其中系统自带的主题，存放在$VIMRUNTIME/colors文件夹下，以*.vim命名。（注：查看$VIMRUNTIME请在vim中执行 :echo $VIMRUNTIME）<br>用户自定义的主题一般不放在系统目录下，而是放在<code>~/.vim/colors</code>目录下，这样不会干扰到其他用户，同时也方便备份自己的vim配置。<br>更换vim主题的命令为：<br><code>:colorscheme 主题插件名称</code><br>但是这样只能临时改变vim主题，退出后又会恢复原样，如果想永久改变，请在~/.vimrc中添加：<br><code>colorscheme 主题插件名称</code></p>
<p>由于我不使用Windows下的gvim，而是在linux下或远程ssh使用终端下的vim，因此首先需要在~/.vimrc中添加开启256颜色支持：<br><code>set t_Co=256</code><br>为了能在编辑程序时高亮显示关键字，还需要在~/.vimrc中开启语法高亮显示：<br><code>syntax enable</code><br><code>syntax on</code><br>做完上述的准备工作后，让我们正式开始定制主题之旅吧！</p>
<h3 id="主题色调">主题色调</h3><p>在配置其他属性前，首先要配置主题整体的色调，只有两个选择：dark和light（暗色调和亮色调）。对于经常阅读和编写代码的程序员来说，暗色调是更好的选择：</p>
<p><code>set background=dark</code><br><strong><span style="color: #ff00ff;">接下来，需要重新设置一下语法高亮，否则设置不会生效：</span></strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">version</span> &gt; <span class="number">580</span></span><br><span class="line"><span class="keyword">hi</span> clear</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">"syntax_on"</span>)</span><br><span class="line"><span class="keyword">syntax</span> reset</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></p>
<h3 id="主题名称">主题名称</h3><p>主题名称是无参数调用 :colorscheme 时返回的信息，用于分辨不同主题，其设置如下：</p>
<p><code>let g:colors_name=&quot;nslib_color256&quot;</code></p>
<h4 id="基础属性">基础属性</h4><p>由于vim可以在黑白终端、彩色终端、GUI界面下运行，所以需要对其分贝进行配置，下面给出一个简要的文档说明：</p>
<blockquote>
<p>term 黑白终端的属性<br>cterm  彩色终端的属性<br>ctermfg 彩色终端前景色<br>ctermbg 彩色终端背景色<br>gui GUI属性<br>guifg GUI前景色<br>guibg GUI背景色</p>
</blockquote>
<p>对于黑白终端，我们没有配置的必要，因此主要的配置工作集中在彩色终端与GUI界面上，又由于彩色终端与GUI界面的配置只是关键字不同，因此这里只选取彩色终端进行说明。</p>]]>
    
    </summary>
    
      <category term="vim" scheme="http://donahue-ldz.github.io/tags/vim/"/>
    
  </entry>
  
</feed>